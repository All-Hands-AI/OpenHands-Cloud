{{- if .Values.database.create -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: create-postgres-user
  annotations:
    "helm.sh/hook": "pre-install,pre-upgrade"
    "helm.sh/hook-weight": "-10"
spec:
  template:
    spec:
      {{- with .Values.securityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
      - name: create-user
        image: postgres:14
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-admin-secret
              key: postgres-admin-password
        - name: NEW_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-password
              key: password
        command:
          - sh
          - -c
          - |
            # Create the database if it doesn't exist
            psql -h {{.Values.database.host}} -p {{.Values.database.port}} -U {{.Values.database.user}} -d postgres -tc "SELECT 1 FROM pg_database WHERE datname='{{.Values.database.name}}'" | grep -q 1 || \
            psql -h {{.Values.database.host}} -p {{.Values.database.port}} -U {{.Values.database.user}} -d postgres -c "CREATE DATABASE {{.Values.database.name}};"

            # Create the user if it doesn't exist
            psql -h {{.Values.database.host}} -p {{.Values.database.port}} -U {{.Values.database.user}} -d {{.Values.database.name}} -tc "SELECT 1 FROM pg_roles WHERE rolname='{{.Values.database.new_user}}'" | grep -q 1 || \
            (psql -h {{.Values.database.host}} -p {{.Values.database.port}} -U {{.Values.database.user}} -d {{.Values.database.name}} -c "CREATE USER {{.Values.database.new_user}} WITH PASSWORD '$NEW_USER_PASSWORD'; GRANT ALL PRIVILEGES ON DATABASE {{.Values.database.name}} TO {{.Values.database.new_user}};")
      restartPolicy: Never
  backoffLimit: 3
{{- end }}